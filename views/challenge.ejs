<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title><%=challenge.name%> Details</title>
    <link rel="stylesheet" href="/header.css" type="text/css" media="all" />
    <link rel="stylesheet" href="/details.css" type="text/css" media="all" />
  </head>
  <body>
   
    <%- include("./partials/header.ejs") -%>
    
    <main class="container">
      <div class="challenge-header">
        <h1 class="challenge-title"><%=challenge.name%></h1>
        <div class="challenge-meta">
          <span><%=challenge.language%> • <%=challenge.expPointReward%> XP</span>
          <span class="badge"><%=challenge.level%></span>
        </div>
          <div class="demfoolclass">
          <a href="/submit" class="btn">Submit Your Solution</a>
       <% if(challenge.deadline) { %>
          <div class="deadline"> Deadline: <%=challenge.deadline.toString().split(' ').slice(0, 4).join(' ') %></div>
       <% } %>
        </div>
      </div>

      <div class="challenge-content">
        <div class="challenge-main">
          <section class="challenge-description">
            <h2>Description</h2>
            <p>
              <%=challenge.description %>
            </p>
          </section>

          <section class="challenge-instructions">
            <h2>Instructions</h2>
            <ol>
              <%-challenge.instructions -%>
            </ol>
          </section>
        </div>

        <aside class="challenge-sidebar">
          <section class="challenge-submissions">
            <h2>Recent Submissions</h2>
            <ul class="submission-list">
              <% submittedChallenges.forEach(data => { %>
              
    
                <li class="submission-item" data-id="<%=data._id%>">
                  <strong><%=data.name%></strong>
                  <div class="submission-meta">
                    <span>by <%=data.submittedBy.username%></span>
                    <span>2 hours ago</span>
                  </div>
                </li>
              <% }) %>
             
            </ul>
          </section>
        </aside>
      </div>
    </main>
<%- include("./partials/footer.ejs") -%>    
<div class="overlay">
<p class="pop-msg" id="pop-msg"></p>
  <div class="popup">
    <h3>Solution Details</h3>
    <ul class="ul-challenge-list" id="ul-challenge-data-list">
  
    </ul>
    
    <div class="popup-content"></div> <!-- Placeholder for dynamic content -->
    
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", async function () {
  const submissionItems = document.querySelectorAll(".submission-item");
  const overlay = document.querySelector(".overlay");
  const msg = document.querySelector("#pop-msg")
  const popupContent = document.querySelector(".popup-content");
  const solutionDetails = document.querySelector("#ul-challenge-data-list");
  let currentRating = 0;
   
  let submittedChallenges = await <%-JSON.stringify(submittedChallenges)%>;
  let userId = await '<%=userId%>';
  let averageRating, currentUser
  
  submissionItems.forEach(item => {
    item.addEventListener("click", (e) => {
      const targetId = item.getAttribute('data-id');
      const targetData = submittedChallenges.find(data => data._id == targetId);
       if(targetData.ratings.length > 0) {
         averageRating = targetData.ratings.map(item => item.rating).reduce((prev, next) => prev + next)/targetData.ratings.length
          
       } else {
         averageRating = 0
       }
       
      // Clear the popup content
      popupContent.innerHTML = '';
      solutionDetails.innerHTML = `
        <li>
          <div class="ul-item">
            <span class="ul-title">Site Name:</span>
            <span class="ul-answer">${targetData.name}</span>
          </div>
          <div class="ul-item">
            <span class="ul-title">Project Link:</span>
            <span class="ul-answer"><a target="_blank" href="${targetData.link}">Visit Project</a></span>
          </div>
          <div class="ul-item">
            <span class="ul-title">Uploaded By:</span>
            <span class="ul-answer"><a href="/user?username=${targetData.submittedBy.username}">${targetData.submittedBy.username}</a></span>
          </div>
          <div class="ul-item">
            <span class="ul-title">Description:</span>
            <span class="ul-answer">${targetData.description}</span>
          </div>
          <div class="ul-footer">
            <div class="ul-rating"><span id="rating-data">${averageRating}</span><span class="ul-star">★</span></div>
            <div class="ul-meta"> • ${targetData.challenge.language} • ${targetData.challenge.expPointReward} XP</div>
          </div>
        </li>
      `;
      
      if (userId && userId != targetData.submittedBy._id) {
        // If the logged-in user is not the one who submitted, show rating options
        popupContent.innerHTML = `
          <div class="rating-container">
            <div class="star-rating">
              <span class="star" data-rating="1">★</span>
              <span class="star" data-rating="2">★</span>
              <span class="star" data-rating="3">★</span>
              <span class="star" data-rating="4">★</span>
              <span class="star" data-rating="5">★</span>
            </div>
           
            <button class="rateBtnCont" id="rateBtn">
              RATE
            </button>
            
          </div>`;
        currentUser = targetData.ratings.find(data => data.userId == userId )
       if(currentUser) {
          let rateBtn = document.getElementById("rateBtn");
          let stars = document.querySelectorAll(".star");
          
          currentRating = currentUser.rating
          
          rateBtn.innerText = "EDIT"
          rateBtn.style = "background-color: var(--color-border); color: #000;"
          stars.forEach(star => star.classList.add("disableClick"))
       }
        // Bind event listeners for stars and rating button
        bindRatingEvents(targetData);
      } else if (userId && userId == targetData.submittedBy._id) {
        // If the logged-in user is the one who submitted, show delete and update options
        popupContent.innerHTML = `
          <div class="btns-usr">
            <form method="post" action="/delete/${targetData._id}" class="popup-buttons">
              <button type="submit" class="popup-btn popup-btn-secondary del-btn" id="visitBtn">
                Delete Submission 
              </button>
            </form>
            <a href="/update/${targetData._id}" class="popup-update popup-btn popup-btn-primary">
              Update Submission
            </a>
          </div>`;
      }
      
      updateStars()
      overlay.classList.add("active");
      
      //i declear this data here to get access to targetData id, this data will be used on click event of rate button
      
    });
  });
  const stars = document.querySelectorAll(".star");
  overlay.addEventListener("click", e => {
    if (e.target === overlay) {
      stars.forEach(star => {
        star.classList.remove("active");
      });
      currentRating = 0;
      overlay.classList.remove("active");
    }
  });
  
  function bindRatingEvents(targetData) {
    let rateBtn = document.getElementById("rateBtn");
    let stars = document.querySelectorAll(".star");
    
    stars.forEach(star => {
      star.addEventListener("click", () => {
        currentRating = parseInt(star.getAttribute("data-rating"));
        updateStars();
      });
    });

    rateBtn.addEventListener("click", () => {
      if(rateBtn.innerText == "EDIT") {
        rateBtn.innerText = "RATE"
        rateBtn.style = "background-color: var(--color-header);"
        stars.forEach(star => star.classList.remove("disableClick"))
      } else if (rateBtn.innerText == "RATE")  {
        if (currentRating > 0) {
          
          const body = {
            challengeId: targetData._id,
            rating: currentRating
          }
          
          rateBtn.innerText = "..."
          stars.forEach(star => star.classList.add("disableClick"))
          fetch("/rate", {
            method: "POST", 
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify(body)
          })
          .then(response => response.json())
          .then(data => {
            if(data.isRated) {
            //   alert("you rated " + currentRating + " Star")
            if(targetData.ratings.length == 0) {
              targetData.ratings.push({
                userId: userId,
                rating: currentRating
              })
            } 
            
              const userRateIndex = targetData.ratings.findIndex(i => i.userId == userId)
              
              targetData.ratings[userRateIndex].rating = currentRating
              
              averageRating = data.ratings.map(item => item.rating).reduce((prev, next) => prev + next)
              document.getElementById("rating-data").innerText = averageRating
              
              showPopMsg(msg, `${currentRating} Stars Rated`)
              
              rateBtn.innerText = "EDIT"
              rateBtn.style = "background-color: var(--color-border); color: #000;"
              
              return 
            }
            rateBtn.innerText = "RATE"
            stars.forEach(star => star.classList.remove("disableClick"))
            rateBtn.style = "background-color: var(--color-header); color: var(--color-star-active);"
            alert(data.message)
          })
          .catch(err => {
            console.log(err)
            alert("something went wrong")
            rateBtn.innerText = "RATE"
            stars.forEach(star => star.classList.remove("disableClick"))
            rateBtn.style = "background-color: var(--color-header); color: var(--color-star-active);"
            
          })
          .finally(() => {
              //stars.forEach(star => star.classList.remove("disableClick"))
          })
          // overlay.classList.remove("active");
  //         currentRating = 0;
  //         updateStars();
        } else {
          alert("Please select a rating before submitting.");
        }
      } else {
        alert("Err")
      }
    });
  }

  function updateStars() {
    const stars = document.querySelectorAll(".star");
    stars.forEach(star => {
      const rating = parseInt(star.getAttribute("data-rating"));
      if (rating <= currentRating) {
        star.classList.add("active");
      } else {
        star.classList.remove("active");
      }
    });
  }
  
  const showPopMsg = (target, message) => {
  
    let timeoutId
    if(timeoutId) clearTimeout(timeoutId)
    
      target.classList.add("show-pop")
      target.innerText = message || " "
      
      timeoutId = setTimeout(function() {
        target.classList.remove("show-pop")
      }, 2000);
  }
});
</script>

  </body>
</html>
